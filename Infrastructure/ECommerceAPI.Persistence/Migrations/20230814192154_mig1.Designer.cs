// <auto-generated />
using System;
using ECommerceAPI.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceAPI.Persistence.Migrations
{
    [DbContext(typeof(ECommerceAPIDbContext))]
    [Migration("20230814192154_mig1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppRoleEndpoint", b =>
                {
                    b.Property<Guid>("EndpointsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EndpointsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("AppRoleEndpoint");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Basket");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItem");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.CompletedOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ComplatedOrders");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Controller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Controllers");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Endpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ControllerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HttpType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ControllerId");

                    b.ToTable("Endpoints");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.FavoriteProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteProduct");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Storage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasDiscriminator<string>("Discriminator").HasValue("File");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderCode")
                        .IsUnique()
                        .HasFilter("[OrderCode] IS NOT NULL");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Sale")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7d839e5-c618-6c4f-73ad-2834867b5135"),
                            CreatedDate = new DateTime(2014, 6, 3, 18, 46, 53, 30, DateTimeKind.Local).AddTicks(6935),
                            Name = "Unbranded Concrete Tuna",
                            Price = 81374.350177725306355m,
                            Quantity = 1610409996,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7c0bc791-10bc-53ac-2e18-92436dfe2da5"),
                            CreatedDate = new DateTime(2019, 10, 3, 5, 23, 39, 870, DateTimeKind.Local).AddTicks(1722),
                            Name = "Practical Frozen Hat",
                            Price = 37151.190193460309227m,
                            Quantity = 769418634,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a283bb77-23ec-1795-df09-a1a7411a4110"),
                            CreatedDate = new DateTime(2021, 2, 21, 9, 43, 8, 332, DateTimeKind.Local).AddTicks(7940),
                            Name = "Awesome Steel Fish",
                            Price = 22141.494458292845485m,
                            Quantity = 1589126620,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4679cbd0-3ba8-8356-26d4-8d239ae17f77"),
                            CreatedDate = new DateTime(2019, 3, 31, 16, 27, 2, 170, DateTimeKind.Local).AddTicks(7277),
                            Name = "Generic Concrete Mouse",
                            Price = 39561.733574088046201m,
                            Quantity = 2063724863,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7163f720-7c5b-3f06-b137-5cc2238171cc"),
                            CreatedDate = new DateTime(2022, 9, 16, 15, 38, 37, 738, DateTimeKind.Local).AddTicks(5927),
                            Name = "Handcrafted Rubber Bike",
                            Price = 63362.570233579243822m,
                            Quantity = 1561310026,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ffc39be3-c5da-29fb-a93a-8648ddf7de87"),
                            CreatedDate = new DateTime(2015, 10, 26, 13, 38, 52, 40, DateTimeKind.Local).AddTicks(7080),
                            Name = "Awesome Rubber Soap",
                            Price = 82817.810370995926186m,
                            Quantity = 1326179415,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0abb8165-9765-017b-20dd-60bf0af50f1c"),
                            CreatedDate = new DateTime(2021, 3, 12, 17, 35, 41, 347, DateTimeKind.Local).AddTicks(4701),
                            Name = "Gorgeous Wooden Cheese",
                            Price = 20632.517848406843515m,
                            Quantity = 1509017481,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f1a30eda-3311-6ae1-5ae9-e4f20d05f3ef"),
                            CreatedDate = new DateTime(2021, 9, 9, 15, 25, 36, 546, DateTimeKind.Local).AddTicks(4273),
                            Name = "Small Steel Pizza",
                            Price = 85083.471233638731406m,
                            Quantity = 630195926,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("961e0845-d10e-2728-847e-9b2cf9f7d71c"),
                            CreatedDate = new DateTime(2019, 6, 10, 16, 17, 41, 85, DateTimeKind.Local).AddTicks(1892),
                            Name = "Licensed Rubber Soap",
                            Price = 66614.231020384206442m,
                            Quantity = 701211552,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("af824eae-b385-3fe4-6cac-6b4cd0e0a6f8"),
                            CreatedDate = new DateTime(2018, 12, 5, 6, 54, 13, 851, DateTimeKind.Local).AddTicks(2239),
                            Name = "Sleek Cotton Pants",
                            Price = 45768.787015664118889m,
                            Quantity = 257540947,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("209e2643-63f2-2312-c9fc-0cdfe4d6f868"),
                            CreatedDate = new DateTime(2020, 7, 1, 9, 16, 46, 980, DateTimeKind.Local).AddTicks(8411),
                            Name = "Refined Steel Bike",
                            Price = 89542.967984935164307m,
                            Quantity = 1129590088,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c184edce-74d5-8238-70cb-8e04d75ea4fd"),
                            CreatedDate = new DateTime(2021, 5, 22, 4, 22, 14, 686, DateTimeKind.Local).AddTicks(3356),
                            Name = "Unbranded Wooden Salad",
                            Price = 63351.305883658469476m,
                            Quantity = 878876180,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d670029d-5490-630e-d429-33701442ea35"),
                            CreatedDate = new DateTime(2020, 7, 8, 0, 6, 44, 131, DateTimeKind.Local).AddTicks(1284),
                            Name = "Awesome Concrete Pizza",
                            Price = 56779.613092973352178m,
                            Quantity = 1586797832,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7aac4f42-82fe-2fef-2f86-35ffb9393d2b"),
                            CreatedDate = new DateTime(2022, 4, 27, 4, 52, 47, 500, DateTimeKind.Local).AddTicks(8121),
                            Name = "Rustic Frozen Tuna",
                            Price = 90318.006762528183724m,
                            Quantity = 1017641300,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("36355ab1-d62d-aebd-8e00-33f78606a4b9"),
                            CreatedDate = new DateTime(2013, 12, 30, 23, 14, 50, 768, DateTimeKind.Local).AddTicks(9514),
                            Name = "Sleek Granite Shirt",
                            Price = 8673.9993519648317434m,
                            Quantity = 979569804,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2cd3866e-5a4e-90d1-47e9-c29597537ee4"),
                            CreatedDate = new DateTime(2018, 11, 3, 12, 26, 43, 397, DateTimeKind.Local).AddTicks(4122),
                            Name = "Fantastic Steel Soap",
                            Price = 66589.29463645373941m,
                            Quantity = 719316823,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c1ca8c2b-c845-bb7d-9ac7-bdd0a8598e9d"),
                            CreatedDate = new DateTime(2022, 6, 25, 9, 49, 53, 355, DateTimeKind.Local).AddTicks(6551),
                            Name = "Practical Wooden Mouse",
                            Price = 56715.210125970662566m,
                            Quantity = 1817327993,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3d1d4aaf-c544-227b-21f1-145064f0e916"),
                            CreatedDate = new DateTime(2023, 6, 5, 17, 13, 43, 966, DateTimeKind.Local).AddTicks(3356),
                            Name = "Unbranded Frozen Tuna",
                            Price = 32555.733121523878894m,
                            Quantity = 2106801033,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0ddaf0a0-9419-1656-bddc-75b0139b663d"),
                            CreatedDate = new DateTime(2014, 8, 26, 0, 18, 21, 811, DateTimeKind.Local).AddTicks(9284),
                            Name = "Intelligent Soft Ball",
                            Price = 38865.000163830322816m,
                            Quantity = 1994976791,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("331addc2-384c-cac3-8afc-268da5e5c67b"),
                            CreatedDate = new DateTime(2023, 4, 28, 12, 19, 27, 631, DateTimeKind.Local).AddTicks(5551),
                            Name = "Rustic Fresh Cheese",
                            Price = 17110.992201399869671m,
                            Quantity = 627461783,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("561abce4-c4b8-8e02-5ccf-0cea6807f7ca"),
                            CreatedDate = new DateTime(2018, 2, 2, 15, 20, 35, 495, DateTimeKind.Local).AddTicks(2756),
                            Name = "Fantastic Metal Sausages",
                            Price = 6649.6643614269626455m,
                            Quantity = 1044503612,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("27015c28-5740-9221-8df5-b66b1cff9cf4"),
                            CreatedDate = new DateTime(2015, 4, 9, 3, 40, 7, 798, DateTimeKind.Local).AddTicks(9874),
                            Name = "Tasty Frozen Chips",
                            Price = 44549.871316824200077m,
                            Quantity = 1668313644,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e458ada2-79fa-e1c2-63fb-a4b808a307de"),
                            CreatedDate = new DateTime(2020, 10, 4, 15, 38, 53, 932, DateTimeKind.Local).AddTicks(2676),
                            Name = "Licensed Steel Car",
                            Price = 42008.578458662213524m,
                            Quantity = 419800254,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("19acb876-9c2a-f59d-7514-7eb834ae0d98"),
                            CreatedDate = new DateTime(2018, 1, 21, 9, 12, 12, 856, DateTimeKind.Local).AddTicks(6945),
                            Name = "Handcrafted Frozen Car",
                            Price = 67543.701215215010185m,
                            Quantity = 960071072,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("377897fa-47c9-bbc8-04be-a3880d6ba39b"),
                            CreatedDate = new DateTime(2019, 3, 2, 16, 11, 1, 290, DateTimeKind.Local).AddTicks(7788),
                            Name = "Incredible Cotton Sausages",
                            Price = 1783.9932275572633216m,
                            Quantity = 78445052,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b18c6784-2112-8798-42a9-c382240740eb"),
                            CreatedDate = new DateTime(2014, 7, 23, 13, 48, 41, 493, DateTimeKind.Local).AddTicks(8211),
                            Name = "Licensed Plastic Pizza",
                            Price = 5775.5129749633032949m,
                            Quantity = 945799264,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dd9192ef-3675-52a0-adfa-d06024508abe"),
                            CreatedDate = new DateTime(2014, 7, 10, 15, 56, 5, 464, DateTimeKind.Local).AddTicks(2937),
                            Name = "Handmade Concrete Shirt",
                            Price = 34780.400255357271622m,
                            Quantity = 1711566786,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2a0179f6-2c69-9494-f0d7-06f009d2e1da"),
                            CreatedDate = new DateTime(2023, 6, 8, 14, 34, 39, 242, DateTimeKind.Local).AddTicks(4892),
                            Name = "Practical Wooden Salad",
                            Price = 2686.9384900975624894m,
                            Quantity = 998800509,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1bbbb3e7-71ae-f77d-ba66-e6fe98f7e192"),
                            CreatedDate = new DateTime(2017, 5, 13, 23, 58, 26, 411, DateTimeKind.Local).AddTicks(3651),
                            Name = "Rustic Soft Towels",
                            Price = 66162.816538713865045m,
                            Quantity = 1514746621,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("95d01f0b-1eb7-0bc5-2052-1cc3dd3b50b0"),
                            CreatedDate = new DateTime(2014, 11, 25, 3, 30, 43, 735, DateTimeKind.Local).AddTicks(3368),
                            Name = "Sleek Soft Gloves",
                            Price = 76017.127694094270271m,
                            Quantity = 352530709,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b4b5f393-343c-2b1d-f3a2-86455cea25f8"),
                            CreatedDate = new DateTime(2017, 4, 12, 12, 45, 25, 170, DateTimeKind.Local).AddTicks(5256),
                            Name = "Refined Plastic Computer",
                            Price = 29978.830818556801372m,
                            Quantity = 260480948,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b764fc01-6d90-3f97-4f7c-58841c2bb034"),
                            CreatedDate = new DateTime(2019, 5, 29, 21, 41, 32, 284, DateTimeKind.Local).AddTicks(1188),
                            Name = "Practical Concrete Cheese",
                            Price = 81152.170631111590669m,
                            Quantity = 1990073586,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e32a1f79-c228-f348-bb01-9d66d78067cb"),
                            CreatedDate = new DateTime(2023, 5, 23, 19, 13, 7, 266, DateTimeKind.Local).AddTicks(5050),
                            Name = "Awesome Wooden Chips",
                            Price = 17353.769224406161663m,
                            Quantity = 387265613,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a33ce490-d684-3a9a-c945-e361269b414e"),
                            CreatedDate = new DateTime(2013, 9, 10, 3, 52, 7, 537, DateTimeKind.Local).AddTicks(1990),
                            Name = "Ergonomic Metal Pants",
                            Price = 9794.167478791485544m,
                            Quantity = 474541330,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c55605b3-522d-324b-75ce-2d5506cb4666"),
                            CreatedDate = new DateTime(2017, 4, 24, 16, 0, 42, 32, DateTimeKind.Local).AddTicks(4523),
                            Name = "Intelligent Frozen Computer",
                            Price = 60303.6070169895091m,
                            Quantity = 1821724848,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1ddb8ea0-5885-73cc-b11f-d898dfb14463"),
                            CreatedDate = new DateTime(2013, 12, 21, 17, 5, 20, 232, DateTimeKind.Local).AddTicks(566),
                            Name = "Refined Fresh Keyboard",
                            Price = 90434.387487199298824m,
                            Quantity = 631061331,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("238e1bb5-b382-6a51-db8b-bd2ecb50df4c"),
                            CreatedDate = new DateTime(2021, 5, 10, 8, 27, 11, 195, DateTimeKind.Local).AddTicks(219),
                            Name = "Licensed Plastic Towels",
                            Price = 98590.837597677740872m,
                            Quantity = 1222072545,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3a7950da-949f-2a35-ef4d-800d2b79172c"),
                            CreatedDate = new DateTime(2023, 1, 8, 19, 17, 10, 375, DateTimeKind.Local).AddTicks(4349),
                            Name = "Licensed Frozen Bacon",
                            Price = 24762.874257733810474m,
                            Quantity = 2094225707,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3cdae490-2eac-1a22-ade1-6a62d88ab6c6"),
                            CreatedDate = new DateTime(2018, 6, 12, 21, 18, 33, 777, DateTimeKind.Local).AddTicks(3412),
                            Name = "Incredible Frozen Cheese",
                            Price = 50246.817451276055248m,
                            Quantity = 1115052044,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4eaa95a1-9694-2b08-14bf-1ada8fbe8b11"),
                            CreatedDate = new DateTime(2014, 12, 4, 0, 30, 16, 659, DateTimeKind.Local).AddTicks(365),
                            Name = "Practical Frozen Fish",
                            Price = 4123.8340998656738104m,
                            Quantity = 1320340148,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cff0794c-9072-c106-2235-4fd909906c2b"),
                            CreatedDate = new DateTime(2018, 3, 21, 21, 13, 58, 259, DateTimeKind.Local).AddTicks(320),
                            Name = "Tasty Rubber Table",
                            Price = 36585.586565794746811m,
                            Quantity = 1659162202,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5b109f9a-fe3a-5543-e6dc-41a65ac7ff16"),
                            CreatedDate = new DateTime(2013, 10, 15, 13, 25, 27, 7, DateTimeKind.Local).AddTicks(7855),
                            Name = "Ergonomic Plastic Shoes",
                            Price = 19014.713147951730154m,
                            Quantity = 2043614577,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d3fb52d4-64db-88f8-6996-8c8160e36033"),
                            CreatedDate = new DateTime(2015, 3, 11, 17, 57, 4, 992, DateTimeKind.Local).AddTicks(4794),
                            Name = "Generic Plastic Mouse",
                            Price = 44718.993018463671343m,
                            Quantity = 667601773,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e6053e73-76de-81cf-b609-7f8d8f53440f"),
                            CreatedDate = new DateTime(2017, 5, 30, 2, 31, 54, 512, DateTimeKind.Local).AddTicks(5984),
                            Name = "Awesome Fresh Table",
                            Price = 1988.2233714310313653m,
                            Quantity = 1688159324,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1d1aff1a-69cb-2ade-d0a2-01a03318d8cb"),
                            CreatedDate = new DateTime(2016, 2, 25, 17, 44, 45, 402, DateTimeKind.Local).AddTicks(6124),
                            Name = "Generic Frozen Pants",
                            Price = 93651.366619686772819m,
                            Quantity = 149816278,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("31de77f5-ca5a-4a61-3353-6ec7db45dc3c"),
                            CreatedDate = new DateTime(2016, 7, 22, 20, 14, 47, 866, DateTimeKind.Local).AddTicks(4594),
                            Name = "Refined Soft Ball",
                            Price = 18411.157956444101353m,
                            Quantity = 1534164051,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cb3320ac-aff4-716b-bbb7-55bc4149eccc"),
                            CreatedDate = new DateTime(2016, 11, 16, 8, 57, 41, 886, DateTimeKind.Local).AddTicks(3208),
                            Name = "Fantastic Cotton Towels",
                            Price = 61061.732917885986787m,
                            Quantity = 648965311,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d7dd100f-ce3d-5144-f7ec-306c2e7c7470"),
                            CreatedDate = new DateTime(2014, 4, 19, 22, 35, 41, 51, DateTimeKind.Local).AddTicks(6647),
                            Name = "Refined Metal Fish",
                            Price = 80356.004753833580833m,
                            Quantity = 1150631697,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3338174e-e0c0-a19c-e7d4-010ec0be2bba"),
                            CreatedDate = new DateTime(2015, 7, 16, 22, 44, 36, 81, DateTimeKind.Local).AddTicks(7217),
                            Name = "Intelligent Granite Chicken",
                            Price = 63133.41298787281684m,
                            Quantity = 214207724,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6697d726-19a9-87a3-b120-ca38bb20394e"),
                            CreatedDate = new DateTime(2021, 3, 3, 9, 5, 26, 119, DateTimeKind.Local).AddTicks(1678),
                            Name = "Intelligent Plastic Chair",
                            Price = 23229.430560086232853m,
                            Quantity = 1947624148,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8f60bcc4-04ec-46f9-78f2-6b99a3f42c28"),
                            CreatedDate = new DateTime(2021, 2, 27, 2, 22, 36, 59, DateTimeKind.Local).AddTicks(9567),
                            Name = "Ergonomic Plastic Computer",
                            Price = 7517.853078372023455m,
                            Quantity = 825633910,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("60570bb9-a895-bc61-76cf-b0bbb8245e42"),
                            CreatedDate = new DateTime(2023, 8, 2, 6, 2, 37, 830, DateTimeKind.Local).AddTicks(8388),
                            Name = "Awesome Cotton Table",
                            Price = 28075.910889868882147m,
                            Quantity = 1792987246,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9c99160d-4dcc-5782-343d-e0e7ee463075"),
                            CreatedDate = new DateTime(2016, 2, 21, 1, 8, 49, 693, DateTimeKind.Local).AddTicks(7671),
                            Name = "Licensed Cotton Cheese",
                            Price = 72764.296903298364562m,
                            Quantity = 1468059292,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f50ade3c-8a1e-ac18-22f6-8d18c33a4531"),
                            CreatedDate = new DateTime(2023, 7, 20, 0, 16, 40, 613, DateTimeKind.Local).AddTicks(9896),
                            Name = "Tasty Concrete Bike",
                            Price = 35138.53178659634572m,
                            Quantity = 1737238323,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("71c8dedf-455a-fc8c-2f70-caf63facfa34"),
                            CreatedDate = new DateTime(2019, 6, 15, 19, 46, 28, 646, DateTimeKind.Local).AddTicks(3125),
                            Name = "Ergonomic Rubber Fish",
                            Price = 20385.822365348943889m,
                            Quantity = 1432007118,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("12cb4a96-fb33-8a9f-559e-2cf46ba2cecc"),
                            CreatedDate = new DateTime(2018, 5, 3, 19, 43, 7, 87, DateTimeKind.Local).AddTicks(4042),
                            Name = "Sleek Rubber Mouse",
                            Price = 49172.216410080628381m,
                            Quantity = 1282252538,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ef30eb69-892f-17b7-87d6-68f84564ed29"),
                            CreatedDate = new DateTime(2016, 8, 29, 4, 29, 16, 252, DateTimeKind.Local).AddTicks(1372),
                            Name = "Practical Cotton Chair",
                            Price = 64715.437890895882537m,
                            Quantity = 1853193406,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6ee10180-0daa-4329-7ed2-d18bc51e5bcf"),
                            CreatedDate = new DateTime(2022, 11, 3, 19, 44, 19, 133, DateTimeKind.Local).AddTicks(2802),
                            Name = "Sleek Concrete Table",
                            Price = 85227.744079564544719m,
                            Quantity = 2024482696,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ac316b5b-bc22-502f-3a96-05b2a3706ce4"),
                            CreatedDate = new DateTime(2019, 7, 2, 19, 3, 43, 475, DateTimeKind.Local).AddTicks(14),
                            Name = "Handmade Concrete Pants",
                            Price = 78973.508163619634014m,
                            Quantity = 1772089399,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e1a7fd48-55a5-2290-4260-c760471ab3fc"),
                            CreatedDate = new DateTime(2017, 3, 12, 0, 38, 7, 744, DateTimeKind.Local).AddTicks(7081),
                            Name = "Handmade Concrete Shoes",
                            Price = 65779.02474633366841m,
                            Quantity = 231902741,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ff901011-4f86-0a87-11e4-eb3b46975c84"),
                            CreatedDate = new DateTime(2022, 10, 25, 9, 18, 42, 915, DateTimeKind.Local).AddTicks(7305),
                            Name = "Practical Soft Gloves",
                            Price = 1186.0354221080641921m,
                            Quantity = 1143425577,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("45ba5a78-52c1-dff1-54b1-ff16b3cf504c"),
                            CreatedDate = new DateTime(2018, 6, 12, 13, 25, 15, 133, DateTimeKind.Local).AddTicks(1614),
                            Name = "Small Granite Car",
                            Price = 46521.563825092446172m,
                            Quantity = 499057967,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("13a87a0b-2a53-4f9b-7582-7aee804f6b58"),
                            CreatedDate = new DateTime(2014, 9, 24, 22, 20, 5, 555, DateTimeKind.Local).AddTicks(6796),
                            Name = "Gorgeous Steel Fish",
                            Price = 712.43093794618373293m,
                            Quantity = 228239484,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("360a1081-95b8-367e-1d23-61d6173b5bb3"),
                            CreatedDate = new DateTime(2023, 5, 20, 0, 5, 20, 835, DateTimeKind.Local).AddTicks(1426),
                            Name = "Incredible Wooden Soap",
                            Price = 58227.304261212099226m,
                            Quantity = 139418328,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("01a5c575-a38f-1626-d4e1-fa354e224851"),
                            CreatedDate = new DateTime(2017, 11, 9, 5, 16, 52, 178, DateTimeKind.Local).AddTicks(3510),
                            Name = "Unbranded Concrete Salad",
                            Price = 90081.764407674656731m,
                            Quantity = 1527492690,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("09b8be47-7bda-cb72-2a84-9a4a24480a91"),
                            CreatedDate = new DateTime(2022, 2, 9, 21, 35, 53, 282, DateTimeKind.Local).AddTicks(1046),
                            Name = "Unbranded Granite Pants",
                            Price = 45950.663825346534202m,
                            Quantity = 1035089425,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("530ae6ba-d679-7a15-4a92-dbd3a0570d01"),
                            CreatedDate = new DateTime(2021, 12, 12, 23, 9, 10, 371, DateTimeKind.Local).AddTicks(1540),
                            Name = "Intelligent Granite Soap",
                            Price = 34060.964741958049885m,
                            Quantity = 1936749948,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0134900e-3ad0-8928-2472-ae63afa0d2dc"),
                            CreatedDate = new DateTime(2022, 9, 13, 20, 27, 17, 994, DateTimeKind.Local).AddTicks(6298),
                            Name = "Practical Rubber Salad",
                            Price = 16458.566927699849851m,
                            Quantity = 100754530,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4f89b81e-3b29-6a7d-f0a6-baa2e5ad0cc0"),
                            CreatedDate = new DateTime(2019, 2, 21, 0, 3, 16, 226, DateTimeKind.Local).AddTicks(9924),
                            Name = "Rustic Plastic Computer",
                            Price = 98603.826035318165611m,
                            Quantity = 2042797690,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5e00661a-3f54-c47c-7b84-8b181bf8aae4"),
                            CreatedDate = new DateTime(2015, 1, 15, 6, 55, 49, 578, DateTimeKind.Local).AddTicks(7317),
                            Name = "Fantastic Metal Car",
                            Price = 1216.0132825468519882m,
                            Quantity = 1485368415,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5d186386-dd7c-175e-5c4b-b138612ea411"),
                            CreatedDate = new DateTime(2020, 10, 7, 3, 46, 7, 847, DateTimeKind.Local).AddTicks(5456),
                            Name = "Licensed Frozen Bike",
                            Price = 7533.9631736047401022m,
                            Quantity = 1652165382,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("12a8c329-63d4-addf-6811-aaa46f0f1965"),
                            CreatedDate = new DateTime(2016, 2, 5, 16, 33, 18, 567, DateTimeKind.Local).AddTicks(7021),
                            Name = "Fantastic Steel Hat",
                            Price = 42821.985560712451498m,
                            Quantity = 1876713821,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9b0ea4a1-e39e-927d-0b23-25e9f8243e91"),
                            CreatedDate = new DateTime(2021, 7, 19, 12, 38, 22, 406, DateTimeKind.Local).AddTicks(3632),
                            Name = "Rustic Soft Chicken",
                            Price = 21803.427633937696057m,
                            Quantity = 274177635,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("acdec479-713d-36ba-20a2-fa0f537009c7"),
                            CreatedDate = new DateTime(2019, 12, 18, 6, 26, 1, 806, DateTimeKind.Local).AddTicks(9846),
                            Name = "Sleek Rubber Car",
                            Price = 87510.305429235089596m,
                            Quantity = 1452800850,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("31584698-40fd-3bb2-3715-3ebbb0ac7f0b"),
                            CreatedDate = new DateTime(2018, 6, 26, 16, 4, 51, 527, DateTimeKind.Local).AddTicks(4840),
                            Name = "Practical Metal Tuna",
                            Price = 87082.231744689442849m,
                            Quantity = 327459256,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("70ce6489-4fa5-aa33-5bfb-025c670d94c4"),
                            CreatedDate = new DateTime(2013, 8, 16, 7, 1, 3, 6, DateTimeKind.Local).AddTicks(4885),
                            Name = "Intelligent Frozen Pants",
                            Price = 63499.053560911322032m,
                            Quantity = 43981144,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("92aee9f2-61a0-2561-2adc-50089e7fdd19"),
                            CreatedDate = new DateTime(2015, 2, 23, 18, 54, 23, 34, DateTimeKind.Local).AddTicks(9097),
                            Name = "Intelligent Metal Salad",
                            Price = 13977.281952865529173m,
                            Quantity = 32550297,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("42180075-1a2f-c3e8-b60f-cfd8b07415c8"),
                            CreatedDate = new DateTime(2019, 9, 14, 2, 30, 14, 159, DateTimeKind.Local).AddTicks(5749),
                            Name = "Intelligent Soft Keyboard",
                            Price = 92285.44719516351136m,
                            Quantity = 1939180373,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7ae0275d-927c-76e6-36ee-443cb39d2ee9"),
                            CreatedDate = new DateTime(2018, 12, 18, 9, 10, 48, 689, DateTimeKind.Local).AddTicks(6453),
                            Name = "Unbranded Rubber Salad",
                            Price = 23523.576434112477709m,
                            Quantity = 1624773635,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("97f650a3-eab1-e020-0843-d5d2970bed66"),
                            CreatedDate = new DateTime(2020, 6, 15, 23, 59, 6, 775, DateTimeKind.Local).AddTicks(1273),
                            Name = "Ergonomic Frozen Hat",
                            Price = 54016.308808946425639m,
                            Quantity = 366936646,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("eb414c07-5e92-a384-977b-9170383868a8"),
                            CreatedDate = new DateTime(2020, 9, 2, 1, 42, 29, 880, DateTimeKind.Local).AddTicks(236),
                            Name = "Unbranded Frozen Fish",
                            Price = 72859.358701741373857m,
                            Quantity = 1371209972,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8abcd486-74ba-7c00-6c6b-588e49a81b17"),
                            CreatedDate = new DateTime(2018, 8, 21, 3, 34, 13, 988, DateTimeKind.Local).AddTicks(96),
                            Name = "Tasty Wooden Cheese",
                            Price = 2053.6750888171922665m,
                            Quantity = 114217933,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("36e033d3-99d6-4ede-9918-fb1f0dc8d7d7"),
                            CreatedDate = new DateTime(2017, 5, 16, 3, 55, 43, 627, DateTimeKind.Local).AddTicks(788),
                            Name = "Fantastic Soft Towels",
                            Price = 26046.855570831080086m,
                            Quantity = 1042472082,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e3099416-90a2-d532-4dcc-8bab17acb4a3"),
                            CreatedDate = new DateTime(2016, 1, 19, 0, 3, 8, 523, DateTimeKind.Local).AddTicks(5295),
                            Name = "Ergonomic Wooden Bike",
                            Price = 3300.8297035963377664m,
                            Quantity = 1055511638,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("27142818-8ba3-f92f-0986-5168fa9af276"),
                            CreatedDate = new DateTime(2023, 2, 14, 14, 36, 39, 252, DateTimeKind.Local).AddTicks(3237),
                            Name = "Awesome Wooden Chips",
                            Price = 12129.951277732215421m,
                            Quantity = 1375146936,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("56147394-5384-bd05-5aa0-0147e08d6938"),
                            CreatedDate = new DateTime(2014, 3, 13, 19, 17, 46, 852, DateTimeKind.Local).AddTicks(6000),
                            Name = "Gorgeous Soft Towels",
                            Price = 34646.76175934179576m,
                            Quantity = 1941570766,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8ef48546-bd29-8288-f240-9e56203eb9eb"),
                            CreatedDate = new DateTime(2018, 2, 18, 11, 15, 45, 605, DateTimeKind.Local).AddTicks(1186),
                            Name = "Rustic Frozen Car",
                            Price = 739.77356803992450517m,
                            Quantity = 24237089,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("eb8f06a2-a73e-192e-d686-b8dee2db2ec1"),
                            CreatedDate = new DateTime(2018, 4, 10, 1, 11, 25, 159, DateTimeKind.Local).AddTicks(4682),
                            Name = "Rustic Granite Shirt",
                            Price = 65075.048567102359045m,
                            Quantity = 1986446931,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e0078862-955a-0c2d-7a00-90d270349b2b"),
                            CreatedDate = new DateTime(2020, 4, 19, 21, 58, 13, 789, DateTimeKind.Local).AddTicks(5369),
                            Name = "Handmade Rubber Chicken",
                            Price = 84633.562248760371538m,
                            Quantity = 1954578372,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("39d6ff41-5177-7dc2-5659-5f10ae37a988"),
                            CreatedDate = new DateTime(2020, 1, 14, 22, 22, 50, 425, DateTimeKind.Local).AddTicks(7292),
                            Name = "Awesome Frozen Shoes",
                            Price = 29468.091825553905811m,
                            Quantity = 1733312426,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("73e14dd1-e191-70f8-23fc-655a3ccb9387"),
                            CreatedDate = new DateTime(2018, 8, 27, 18, 42, 53, 218, DateTimeKind.Local).AddTicks(7868),
                            Name = "Small Fresh Soap",
                            Price = 33453.827771234371426m,
                            Quantity = 844802309,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("64be298d-f98b-322a-b0a9-c7c7c47b9e85"),
                            CreatedDate = new DateTime(2015, 10, 20, 1, 35, 42, 157, DateTimeKind.Local).AddTicks(3893),
                            Name = "Rustic Frozen Pizza",
                            Price = 31626.200901496333321m,
                            Quantity = 926017161,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ce9bf854-65e8-c38d-b28a-9dc2396613d5"),
                            CreatedDate = new DateTime(2014, 6, 12, 1, 57, 27, 821, DateTimeKind.Local).AddTicks(7363),
                            Name = "Generic Soft Fish",
                            Price = 93069.395253941327992m,
                            Quantity = 1385514324,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cfafb0fa-edfe-50dc-23d8-2206166604c7"),
                            CreatedDate = new DateTime(2015, 1, 1, 19, 25, 14, 815, DateTimeKind.Local).AddTicks(8390),
                            Name = "Licensed Frozen Mouse",
                            Price = 31795.342983586198045m,
                            Quantity = 562428145,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3316a657-0738-fba4-fad8-26660e43fab2"),
                            CreatedDate = new DateTime(2023, 6, 18, 17, 30, 27, 460, DateTimeKind.Local).AddTicks(2221),
                            Name = "Handcrafted Granite Chicken",
                            Price = 2438.5724310198401209m,
                            Quantity = 343656839,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f561d81e-2865-94dd-83ab-959900f40c9d"),
                            CreatedDate = new DateTime(2014, 3, 4, 23, 17, 28, 192, DateTimeKind.Local).AddTicks(7905),
                            Name = "Handmade Metal Chips",
                            Price = 25569.445831098218866m,
                            Quantity = 1122342683,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0c4444c5-e400-1c9b-d5c4-8549a74d175a"),
                            CreatedDate = new DateTime(2013, 12, 2, 22, 3, 20, 856, DateTimeKind.Local).AddTicks(6283),
                            Name = "Rustic Cotton Salad",
                            Price = 28372.214881377336367m,
                            Quantity = 1017536814,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6d6f9ace-cd33-5bb0-94b1-8f28a47e844b"),
                            CreatedDate = new DateTime(2015, 6, 3, 12, 49, 37, 553, DateTimeKind.Local).AddTicks(882),
                            Name = "Small Steel Car",
                            Price = 96932.077150145593897m,
                            Quantity = 10953412,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1f46faf5-a145-fdca-8b12-8ef301aafc1d"),
                            CreatedDate = new DateTime(2015, 8, 19, 12, 48, 8, 394, DateTimeKind.Local).AddTicks(8176),
                            Name = "Tasty Rubber Mouse",
                            Price = 9882.8197175729224171m,
                            Quantity = 1911071962,
                            Sale = false,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("33a2c883-ab8e-177e-1bfe-41b9af0062a2"),
                            CreatedDate = new DateTime(2021, 4, 25, 13, 4, 53, 355, DateTimeKind.Local).AddTicks(476),
                            Name = "Awesome Wooden Chips",
                            Price = 84416.946841083010069m,
                            Quantity = 1889563185,
                            Sale = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("ProductDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductProductImageFile", b =>
                {
                    b.Property<Guid>("ProductImageFilesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductImageFilesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductProductImageFile");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.InvoiceFile", b =>
                {
                    b.HasBaseType("ECommerceAPI.Domain.Entities.File");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("InvoiceFile");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.ProductImageFile", b =>
                {
                    b.HasBaseType("ECommerceAPI.Domain.Entities.File");

                    b.Property<bool>("ShowCase")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("ProductImageFile");
                });

            modelBuilder.Entity("AppRoleEndpoint", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.Endpoint", null)
                        .WithMany()
                        .HasForeignKey("EndpointsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Basket", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.Identity.AppUser", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.BasketItem", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceAPI.Domain.Entities.Product", "Product")
                        .WithMany("BasketItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.CompletedOrder", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.Order", "Order")
                        .WithOne("ComplatedOrder")
                        .HasForeignKey("ECommerceAPI.Domain.Entities.CompletedOrder", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Endpoint", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.Controller", "Controller")
                        .WithMany("Endpoints")
                        .HasForeignKey("ControllerId");

                    b.Navigation("Controller");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.FavoriteProduct", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.Product", "Product")
                        .WithMany("FavUsers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceAPI.Domain.Entities.Identity.AppUser", "User")
                        .WithMany("FavProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Message", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.Identity.AppUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.Basket", "Basket")
                        .WithOne("Order")
                        .HasForeignKey("ECommerceAPI.Domain.Entities.Order", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceAPI.Domain.Entities.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.ProductDetail", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.Product", "Product")
                        .WithOne("ProductDetails")
                        .HasForeignKey("ECommerceAPI.Domain.Entities.ProductDetail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductProductImageFile", b =>
                {
                    b.HasOne("ECommerceAPI.Domain.Entities.ProductImageFile", null)
                        .WithMany()
                        .HasForeignKey("ProductImageFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceAPI.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Basket", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Controller", b =>
                {
                    b.Navigation("Endpoints");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("FavProducts");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("ComplatedOrder");
                });

            modelBuilder.Entity("ECommerceAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("Categories");

                    b.Navigation("FavUsers");

                    b.Navigation("ProductDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
